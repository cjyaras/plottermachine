// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2019 12:21:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          stepper_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stepper_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enable;
reg [15:0] inverse_speed;
// wires                                               
wire step_clk;

// assign statements (if any)                          
stepper_controller i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enable(enable),
	.inverse_speed(inverse_speed),
	.step_clk(step_clk)
);
initial 
begin 
#100000000 $finish;
end 

// clk
initial
begin
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
	clk = #10000 1'b1;
	# 9000;
	repeat(4950)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// enable
initial
begin
	enable = 1'b1;
end 
// inverse_speed[ 15 ]
initial
begin
	inverse_speed[15] = 1'b0;
end 
// inverse_speed[ 14 ]
initial
begin
	inverse_speed[14] = 1'b0;
end 
// inverse_speed[ 13 ]
initial
begin
	inverse_speed[13] = 1'b0;
end 
// inverse_speed[ 12 ]
initial
begin
	inverse_speed[12] = 1'b0;
end 
// inverse_speed[ 11 ]
initial
begin
	inverse_speed[11] = 1'b0;
end 
// inverse_speed[ 10 ]
initial
begin
	inverse_speed[10] = 1'b0;
end 
// inverse_speed[ 9 ]
initial
begin
	inverse_speed[9] = 1'b0;
end 
// inverse_speed[ 8 ]
initial
begin
	inverse_speed[8] = 1'b0;
end 
// inverse_speed[ 7 ]
initial
begin
	inverse_speed[7] = 1'b0;
end 
// inverse_speed[ 6 ]
initial
begin
	inverse_speed[6] = 1'b0;
end 
// inverse_speed[ 5 ]
initial
begin
	inverse_speed[5] = 1'b0;
end 
// inverse_speed[ 4 ]
initial
begin
	inverse_speed[4] = 1'b0;
end 
// inverse_speed[ 3 ]
initial
begin
	inverse_speed[3] = 1'b0;
end 
// inverse_speed[ 2 ]
initial
begin
	inverse_speed[2] = 1'b0;
end 
// inverse_speed[ 1 ]
initial
begin
	inverse_speed[1] = 1'b0;
end 
// inverse_speed[ 0 ]
initial
begin
	inverse_speed[0] = 1'b1;
end 
endmodule

